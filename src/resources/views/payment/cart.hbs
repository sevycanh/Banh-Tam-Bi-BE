<link rel="stylesheet" href="/css/cart.css">
<div class="card">
    <div class="row">
        <div class="col-md-8 cart">
            <div class="title">
                <div class="row">
                    <div class="col">
                        <h4><b>Giỏ hàng</b></h4>
                    </div>
                </div>
            </div>
            {{#each cartProducts}}
            <div class="row border-top border-bottom">
                <div class="row main align-items-center" data-product-id="{{this._id}}"
                    data-product-price="{{this.price}}">
                    <div class="col-2"><img class="img-fluid" src="{{this.image}}"></div>
                    <div class="col">
                        <div class="row">{{this.name}}</div>
                        <div class="row red-text" id="price-{{this._id}}"></div>
                    </div>
                    <div class="col ms-5">
                        <input type="button" value="-" onclick="minusQuantity('{{this._id}}')" class="qty-btn">
                        <input type="text" id="quantity-{{this._id}}" name="quantity" value="{{this.quantity}}" min="1"
                            max="50" class="center-input" style="width: 30px;" disabled>
                        <input type="button" value="+" onclick="plusQuantity('{{this._id}}')" class="qty-btn">
                    </div>
                    <div class="col"><button onclick="removeProduct('{{this._id}}')">Xóa</button></div>
                </div>
            </div>
            {{else}}
            <h5 class="red-text">Giỏ hàng trống!</h5>
            {{/each}}
        </div>
        <div class="col-md-4 summary">
            <div>
                <h4><b>Thông tin đơn hàng</b></h4>
            </div>

            <div class="row" style="border-top: 1px solid rgba(0,0,0,.1); padding: 2vh 0;">
                <div class="col">Địa chỉ giao hàng: </div>
                <div class="col text-right"><a href="/accounts/{{user._id}}/address">(Thay đổi)</a></div>
                <p>
                    <b id="addressValue"></b>
                </p>
            </div>
            <p>Ghi chú:</p>
            <textarea id="note" placeholder="Nhập ghi chú"></textarea>
            <p>Phương thức thanh toán:</p>
            <div class="col-lg-12">
                <select class="form-select" id="paymentMethod" name="paymentMethod" required
                    aria-label="select example">
                    <option value="">---Chọn phương thức thanh toán---</option>
                    <option value="COD">Thanh toán bằng tiền mặt</option>
                </select>
                <div class="invalid-feedback">Vui lòng chọn quận/huyện</div>
            </div>
            <div class="row" style="border-top: 1px solid rgba(0,0,0,.1);">
                <div class="col mt-3">Tiền hàng: </div>
                <div class="col mt-3 text-right" id="total-price">0đ</div>
            </div>
            <div class="row">
                <div class="col">Phí giao hàng: </div>
                <div class="col text-right" id="shipping-fee">20.000đ</div>
            </div>
            <div class="row mb-4">
                <div class="col">Tổng đơn hàng: </div>
                <div class="col text-right red-text" id="final-price">0đ</div>
            </div>
            <button class="btn-thanh-toan" onclick="thanhToan('{{user._id}}')">Thanh Toán</button>
        </div>
    </div>
</div>

<script>
    function plusQuantity(id) {
        var quantityInput = document.getElementById(`quantity-${id}`);
        var currentValue = parseInt(quantityInput.value);
        if (currentValue < parseInt(quantityInput.getAttribute("max"))) {
            quantityInput.value = currentValue + 1;
            updateQuantityInCookies(id, quantityInput.value)
            updatePrice(id, currentValue + 1)
        }
    }

    function minusQuantity(id) {
        var quantityInput = document.getElementById(`quantity-${id}`);
        var currentValue = parseInt(quantityInput.value);

        if (currentValue > parseInt(quantityInput.getAttribute("min"))) {
            quantityInput.value = currentValue - 1;
            updateQuantityInCookies(id, quantityInput.value)
            updatePrice(id, currentValue - 1)
        }
    }

    function updateQuantityInCookies(productId, newQuantity) {
        if (checkCookieExists("products")) {
            let products = JSON.parse(getCookie("products"));

            for (let i = 0; i < products.length; i++) {
                if (products[i].productId === productId) {
                    products[i].quantity = newQuantity;
                    break;
                }
            }

            document.cookie = `products=${JSON.stringify(products)};max-age=86400; path=/`;
        }

    }

    function getCookie(name) {
        const value = `; ${document.cookie}`;
        const parts = value.split(`; ${name}=`);
        if (parts.length === 2) return parts.pop().split(';').shift();
    }

    function updatePrice(id, newQuantity) {
        if (checkCookieExists("products")) {
            let products = JSON.parse(getCookie("products"));

            for (let i = 0; i < products.length; i++) {
                if (products[i].productId === id) {
                    let originalPrice = products[i].price;
                    let newPrice = originalPrice * newQuantity;
                    document.getElementById(`price-${id}`).innerText = formatPrice(newPrice);
                    break;
                }
            }

            updateTotalPrice()
        }

    }

    function updatePriceOnLoad() {
        if (checkCookieExists("products")) {
            let products = JSON.parse(getCookie("products"));

            products.forEach(product => {
                let quantity = product.quantity;
                let price = product.price * quantity;
                document.getElementById(`price-${product.productId}`).innerText = formatPrice(price);
            });

            updateTotalPrice()
        }

    }
    window.addEventListener('load', updatePriceOnLoad);

    function updateTotalPrice() {
        if (checkCookieExists("products")) {
            let products = JSON.parse(getCookie("products"));
            let totalPrice = products.reduce((total, product) => {
                return total + (product.price * product.quantity);
            }, 0);
            //tổng tiền hàng
            document.getElementById('total-price').innerText = formatPrice(totalPrice);

            //Tính tổng tiền
            let finalPrice = totalPrice + 20000;
            document.getElementById('final-price').innerText = formatPrice(finalPrice);
        }

    }

    function formatPrice(price) {
        return price.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ".") + 'đ';
    }

    function checkCookieExists(cookieName) {
        return document.cookie.split(';').some((item) => item.trim().startsWith(`${cookieName}=`));
    }

    function removeProduct(productId) {
        if (checkCookieExists("products")) {
            let products = JSON.parse(getCookie("products"));
            // Lọc ra các sản phẩm không phải là sản phẩm cần xóa
            products = products.filter(product => product.productId !== productId);
            document.cookie = `products=${JSON.stringify(products)};max-age=86400; path=/`;
            location.reload();
        }
    }

    const user = '{{user.address}}'
    const address = user.split(", ");
    var addressTransform;
    fetch(`https://esgoo.net/api-tinhthanh/5/27313.htm`).then(response => response.json()).then(
        data => {
            const addressDetail = data.data.full_name;
            addressTransform = address[0] + ', ' + address[1] + ', ' + address[5] + ' ' + address[6] + ', ' + addressDetail

            const addressElement = document.getElementById("addressValue");
            addressElement.textContent = addressTransform;
        }
    ).catch(err => {
        alert("Lỗi chuyển đổi id sang tên địa chỉ")
    })

    function thanhToan(userId) {
        let cartProducts = '{{cartProducts}}'
        if (cartProducts === '') {
            alert("Chưa có sản phẩm nào trong giỏ")
            return
        }

        var selectedPaymentMethod = document.getElementById('paymentMethod').value;

        if (selectedPaymentMethod === '') {
            alert('Vui lòng chọn phương thức thanh toán trước khi thanh toán.');
        } else {
            const note = document.getElementById('note').value;
            const token = '{{token}}'

            const totalPrice = document.getElementById('total-price').textContent.trim();
            const shippingFee = document.getElementById('shipping-fee').textContent.trim();
            const finalPrice = document.getElementById('final-price').textContent.trim();

            const order = {
                userId: userId,
                note: note,
                deliverAddress: addressTransform,
                paymentMethod: selectedPaymentMethod,
                totalPrice: totalPrice,
                shippingFee: shippingFee,
                finalPrice: finalPrice,
                status: 1,
                orderDate: getTimeNow(),
            }

            const productsData = [];

            document.querySelectorAll('.main').forEach(productElement => {
                const productId = productElement.getAttribute('data-product-id');
                const quantity = productElement.querySelector(`#quantity-${productId}`).value;
                const price = parseFloat(productElement.getAttribute('data-product-price'));
                const totalAmount = price * parseInt(quantity);

                productsData.push({ productId, quantity, totalAmount });
            });

            fetch('/cart/payment', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify({
                    order,
                    products: productsData
                }),
            })
                .then(response => {
                    var cookies = document.cookie.split(";");

                    for (var i = 0; i < cookies.length; i++) {
                        var cookie = cookies[i];
                        var eqPos = cookie.indexOf("=");
                        var name = eqPos > -1 ? cookie.substr(0, eqPos) : cookie;
                        document.cookie = name + "=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/";
                    }

                    window.location.href = `/accounts/${userId}/order`;
                })
                .catch(error => {
                    console.error('Đã xảy ra lỗi:', error);
                });
        }
    }

    function getTimeNow() {
        const now = new Date();

        const day = String(now.getDate()).padStart(2, '0');
        const month = String(now.getMonth() + 1).padStart(2, '0'); // tháng bắt đầu từ 0
        const year = now.getFullYear();
        const hours = String(now.getHours()).padStart(2, '0');
        const minutes = String(now.getMinutes()).padStart(2, '0');
        const seconds = String(now.getSeconds()).padStart(2, '0');

        // ngày/tháng/năm - giờ:phút:giây
        const formattedDateTime = `${day}/${month}/${year} - ${hours}:${minutes}:${seconds}`;
        return formattedDateTime;
    }
</script>